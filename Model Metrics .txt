Model Metrics Import Libraries:import pandas as pdimport numpy as npimport mathimport refrom scipy.sparse import csr_matriximport matplotlib.pyplot as pltimport seaborn as snssns.set_style("darkgrid")%matplotlib inline import plotly.graph_objs as goimport plotly.figure_factory as fffrom plotly import toolsfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplotinit_notebook_mode(connected=True)from ast import literal_evalimport matplotlib#reconfigure default settingssns.set_palette(sns.color_palette("hls", 8))matplotlib.rc('figure', figsize = (20, 8))matplotlib.rc('font', size = 14)matplotlib.rc('axes.spines', top = False, right = False)matplotlib.rc('axes', grid = False)matplotlib.rc('axes', facecolor = 'white')from sklearn.feature_extraction.text import CountVectorizerfrom sklearn.metrics.pairwise import cosine_similarityfrom sklearn.feature_extraction.text import TfidfVectorizerfrom sklearn.metrics.pairwise import linear_kernel# Function that takes in movie title as input and outputs most similar moviesdef get_recommendations(title, cosine_sim=cosine_sim):    # Get the index of the movie that matches the title    idx = indices[title]    # Get the pairwsie similarity scores of all movies with that movie    sim_scores = list(enumerate(cosine_sim[idx]))    # Sort the movies based on the similarity scores    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)    # Get the scores of the 10 most similar movies    sim_scores = sim_scores[1:11]    # Get the movie indices    movie_indices = [i[0] for i in sim_scores]    # Return the top 10 most similar movies    return movies_data['title_x'].iloc[movie_indices]